package com.roeticvampire.randomgame;

import androidx.appcompat.app.AppCompatActivity;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.ActivityNotFoundException;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.res.AssetFileDescriptor;
import android.graphics.Bitmap;
import android.graphics.drawable.BitmapDrawable;
import android.net.Uri;
import android.os.Bundle;
import android.provider.MediaStore;
import android.renderscript.Element;
import android.util.Log;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.roeticvampire.randomgame.ml.WasteClassifier;

import org.tensorflow.lite.DataType;
import org.tensorflow.lite.Interpreter;
import org.tensorflow.lite.support.common.FileUtil;
import org.tensorflow.lite.support.common.TensorOperator;
import org.tensorflow.lite.support.common.TensorProcessor;
import org.tensorflow.lite.support.common.ops.NormalizeOp;
import org.tensorflow.lite.support.image.ImageProcessor;
import org.tensorflow.lite.support.image.TensorImage;
import org.tensorflow.lite.support.image.ops.ResizeOp;
import org.tensorflow.lite.support.image.ops.ResizeWithCropOrPadOp;
import org.tensorflow.lite.support.image.ops.Rot90Op;
import org.tensorflow.lite.support.label.TensorLabel;
import org.tensorflow.lite.*;
import org.tensorflow.lite.support.tensorbuffer.TensorBuffer;

import java.io.FileInputStream;
import java.io.IOException;
import java.nio.MappedByteBuffer;
import java.nio.channels.FileChannel;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PlayActivity extends AppCompatActivity {
    private static final int BIODEGRADABLE=0;
    private static final int NON_BIODEGRADABLE=1;
    int result;
    String name, email_id,profileImg;
    int score=0;
    int response;
    ImageView currImage;
    ImageView user_profile;
    TextView bottomTextView,user_name,user_email;
    ImageButton biod_btn,nonbiod_btn, checkLDB_btn,playAgain_btn;
    LinearLayout pregamelayer,postgamelayer;
    static final int REQUEST_IMAGE_CAPTURE = 1;
    HashMap<String,Integer> categories;
    private static final float IMAGE_MEAN = 0.0f;
    private static final float IMAGE_STD = 1.0f;
    private static final float PROBABILITY_MEAN = 0.0f;
    private static final float PROBABILITY_STD = 255.0f;
    private static String bioMessage="\n\nPlease put the garbage in the GREEN Dustbin";
    private static String nonbioMessage="\n\nPlease put the garbage in the BLUE Dustbin";

    private Bitmap bitmap;
    private List<String> labels;
    Uri imageuri;

    private Interpreter tflite;
    private MappedByteBuffer tfliteModel;
    private TensorImage inputImageBuffer;
    private int imageSizeX;
    private int imageSizeY;
    private TensorBuffer outputProbabilityBuffer;
    private TensorProcessor probabilityProcessor;

    private void dispatchTakePictureIntent() {
        Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
        try {
            startActivityForResult(takePictureIntent, REQUEST_IMAGE_CAPTURE);
        } catch (ActivityNotFoundException e) {
            // display error state to the user
        }
    }
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        categories=new HashMap<String, Integer>();
        setContentView(R.layout.activity_play);
        currImage=findViewById(R.id.currImageView);
        bottomTextView=findViewById(R.id.bottomTextView);
        biod_btn=findViewById(R.id.biod_btn);
        nonbiod_btn=findViewById(R.id.nonbiod_btn);
        checkLDB_btn=findViewById(R.id.checkldb_btn);
        playAgain_btn=findViewById(R.id.playAgain_btn);
        pregamelayer=findViewById(R.id.pregameLayer);
        postgamelayer=findViewById(R.id.postgameLayer);
        user_name=findViewById(R.id.yourNameView);
        user_email=findViewById(R.id.yourEmailView);
        user_profile=findViewById(R.id.profileView);
        user_name=findViewById(R.id.yourNameView);
        user_email=findViewById(R.id.yourEmailView);
        user_profile=findViewById(R.id.profileView);
        initialize();
        try{
            tflite=new Interpreter(loadmodelfile(this));
        }catch (Exception e) {
            e.printStackTrace();
        }
        currImage.setOnClickListener(v->{
            if(result==BIODEGRADABLE){
                result=NON_BIODEGRADABLE;
                 }
            else
                result=BIODEGRADABLE;
            Log.d("Bro", "The result is now "+(result==BIODEGRADABLE?"BIODEGRADABLE":"NONBIODEGRADABLE"));


        });

        SharedPreferences sharedpreferences = getSharedPreferences("Personal_details", Context.MODE_PRIVATE);
        name=sharedpreferences.getString("NAME","");
        email_id=sharedpreferences.getString("EMAIL","");
        score=sharedpreferences.getInt("SCORE",0);
        profileImg=sharedpreferences.getString("PROFILEIMG","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 ");

        user_name.setText(name);
        user_email.setText(email_id);
        user_profile.setImageBitmap(ImageUtil.convert(profileImg));
        //_________________________________________________________ OLDIE HELPIE!__________________________________________________________________

        checkLDB_btn.setOnClickListener(v->{
            Intent intent=new Intent(PlayActivity.this,LeaderboardActivity.class);
            startActivity(intent);
        });
        playAgain_btn.setOnClickListener(v->{
            dispatchTakePictureIntent();
        });

        biod_btn.setOnClickListener(v->{
            response=BIODEGRADABLE;
            createScores();

        });
        nonbiod_btn.setOnClickListener(v->{
            response=NON_BIODEGRADABLE;
            createScores();
        });

        dispatchTakePictureIntent();





    }

    @SuppressLint("SetTextI18n")
    private void createScores() {
        pregamelayer.setAlpha(0f);
        postgamelayer.setAlpha(1f);
        biod_btn.setClickable(false);
        nonbiod_btn.setClickable(false);
        if(response==result){
            //correct answer
            //score=50; //Need a better cooler function for this
            bottomTextView.setText("Congratulations!\nThat was accurate!\nYou've gained "+score+" points"+((result==BIODEGRADABLE)?bioMessage:nonbioMessage));
            updateScorecard();
        }
        else{
            bottomTextView.setText("Oops!\nThat wasn't right!"+((result==BIODEGRADABLE)?bioMessage:nonbioMessage));
        }
        if(result==BIODEGRADABLE)
            currImage.setImageResource(R.drawable.green_dustbin_min);
        else currImage.setImageResource(R.drawable.blue_dustbin_min);
        playAgain_btn.setClickable(true);
        checkLDB_btn.setClickable(true);




    }

    private void updateScorecard() {
        SharedPreferences sharedpreferences = getSharedPreferences("Personal_details", Context.MODE_PRIVATE);
        score+=sharedpreferences.getInt("SCORE",0);
        SharedPreferences.Editor edit=sharedpreferences.edit();
        edit.putInt("SCORE",score);
        edit.apply();
        Connection connection=CustomApplication.connection;
        if(connection!=null){
            try {
                Statement st=connection.createStatement();
                String email=sharedpreferences.getString("EMAIL","");
                st.executeQuery("UPDATE RandomPrimaryTable Set SCORE = "+score+" where EMAIL Like '"+email+"';");

            } catch (SQLException throwables) {
                throwables.printStackTrace();
            }

        }

    }

    private int OldieMagic(Bitmap bitmap) {try {
        WasteClassifier model = WasteClassifier.newInstance(this);
        int imageTensorIndex = 0;
        int[] imageShape = tflite.getInputTensor(imageTensorIndex).shape(); // {1, height, width, 3}
        imageSizeY = imageShape[1];
        imageSizeX = imageShape[2];
        DataType imageDataType = tflite.getInputTensor(imageTensorIndex).dataType();
        int probabilityTensorIndex = 0;
        int[] probabilityShape =
                tflite.getOutputTensor(probabilityTensorIndex).shape(); // {1, NUM_CLASSES}
        DataType probabilityDataType = tflite.getOutputTensor(probabilityTensorIndex).dataType();

        inputImageBuffer = new TensorImage(imageDataType);
        outputProbabilityBuffer = TensorBuffer.createFixedSize(probabilityShape, probabilityDataType);
        probabilityProcessor = new TensorProcessor.Builder().add(getPostprocessNormalizeOp()).build();

        inputImageBuffer = loadImage(bitmap);

        tflite.run(inputImageBuffer.getBuffer(),outputProbabilityBuffer.getBuffer().rewind());
        showresult();

    } catch (IOException e) {
        // TODO Handle the exception
    }
        //Waiting for you to guide me with all the mess that TF is
        //Until then I;ll assume every image is BIODEGRADABLE;
        return result;


    }
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (requestCode == REQUEST_IMAGE_CAPTURE && resultCode == RESULT_OK) {
            Bundle extras = data.getExtras();
            Bitmap imageBitmap = (Bitmap) extras.get("data");
            currImage.setImageBitmap(imageBitmap);
            pregamelayer.setAlpha(1f);
            postgamelayer.setAlpha(0f);
            checkLDB_btn.setClickable(false);
            playAgain_btn.setClickable(false);
            result=OldieMagic(imageBitmap);
            biod_btn.setClickable(true);
            nonbiod_btn.setClickable(true);
            bottomTextView.setText("Choose your Answer");


        }
    }






    private TensorImage loadImage(final Bitmap bitmap) {
        // Loads bitmap into a TensorImage.
        inputImageBuffer.load(bitmap);

        // Creates processor for the TensorImage.
        int cropSize = Math.min(bitmap.getWidth(), bitmap.getHeight());
        // TODO(b/143564309): Fuse ops inside ImageProcessor.
        ImageProcessor imageProcessor =
                new ImageProcessor.Builder()
                        .add(new ResizeWithCropOrPadOp(cropSize, cropSize))
                        .add(new ResizeOp(imageSizeX, imageSizeY, ResizeOp.ResizeMethod.NEAREST_NEIGHBOR))
                        .add(getPreprocessNormalizeOp())
                        .build();
        return imageProcessor.process(inputImageBuffer);
    }

    private MappedByteBuffer loadmodelfile(Activity activity) throws IOException {
        AssetFileDescriptor fileDescriptor=activity.getAssets().openFd("waste_classifier.tflite");
        FileInputStream inputStream=new FileInputStream(fileDescriptor.getFileDescriptor());
        FileChannel fileChannel=inputStream.getChannel();
        long startoffset = fileDescriptor.getStartOffset();
        long declaredLength=fileDescriptor.getDeclaredLength();
        return fileChannel.map(FileChannel.MapMode.READ_ONLY,startoffset,declaredLength);
    }

    private TensorOperator getPreprocessNormalizeOp() {
        return new NormalizeOp(IMAGE_MEAN, IMAGE_STD);
    }
    private TensorOperator getPostprocessNormalizeOp(){
        return new NormalizeOp(PROBABILITY_MEAN, PROBABILITY_STD);
    }

    private void showresult(){

        Map<String, Float> labeledProbability =
                new TensorLabel(labels, probabilityProcessor.process(outputProbabilityBuffer))
                        .getMapWithFloatValue();
        float maxValueInMap =(Collections.max(labeledProbability.values()));

        for (Map.Entry<String, Float> entry : labeledProbability.entrySet()) {
           // Log.d("Bro", entry.getKey()+" "+entry.getValue());
           // float delta=0.0001f;
            if (entry.getValue()==maxValueInMap) {
                Log.d("Bro", "The identified object is: "+entry.getKey()+" "+entry.getValue());
                result=categories.get(entry.getKey());
                score=(int)Math.max(5000*entry.getValue(),10f);
                Log.d("Bro", "Score to get is: "+score+" and the answer is "+(result==BIODEGRADABLE?"BIODERADABLE":"NONBIODEGRADABLE"));
                bottomTextView.setText(entry.getKey()); //________________________FOR NOW ONLY
            }
        }
    }

    void initialize(){
        labels = new ArrayList<>();
        categories=new HashMap<String,Integer>();
        labels.add("Xlight");   categories.put("Xlight",NON_BIODEGRADABLE);
        labels.add("bandaid");categories.put("bandaid",BIODEGRADABLE);
        labels.add("battery");categories.put("battery",NON_BIODEGRADABLE);
        labels.add("bowlsanddishes");categories.put("bowlsanddishes",BIODEGRADABLE);
        labels.add("bread");categories.put("bread",BIODEGRADABLE);
        labels.add("bulb");categories.put("bulb",NON_BIODEGRADABLE);
        labels.add("cans");categories.put("cans",NON_BIODEGRADABLE);
        labels.add("carton");categories.put("carton",BIODEGRADABLE);
        labels.add("chopsticks");categories.put("chopsticks",BIODEGRADABLE);
        labels.add("cigarettebutt");categories.put("cigarettebutt",BIODEGRADABLE);
        labels.add("diapers");categories.put("diapers",NON_BIODEGRADABLE);
        labels.add("facialmask");categories.put("facialmask",BIODEGRADABLE);
        labels.add("glassbottle");categories.put("glassbottle",NON_BIODEGRADABLE);
        labels.add("leaflet");categories.put("leaflet",BIODEGRADABLE);
        labels.add("leftovers");categories.put("leftovers",BIODEGRADABLE);
        labels.add("medicinebottle");categories.put("medicinebottle",NON_BIODEGRADABLE);
        labels.add("milkbox");categories.put("milkbox",BIODEGRADABLE);
        labels.add("nailpolishbottle");categories.put("nailpolishbottle",NON_BIODEGRADABLE);
        labels.add("napkin");categories.put("napkin",BIODEGRADABLE);
        labels.add("newspaper");categories.put("newspaper",BIODEGRADABLE);
        labels.add("nut");categories.put("nut",BIODEGRADABLE);
        labels.add("penholder");categories.put("penholder",NON_BIODEGRADABLE);
        labels.add("pesticidebottle");categories.put("pesticidebottle",NON_BIODEGRADABLE);
        labels.add("plasticbag");categories.put("plasticbag",NON_BIODEGRADABLE);
        labels.add("plasticbottle");categories.put("plasticbottle",NON_BIODEGRADABLE);
        labels.add("plasticene");categories.put("plasticene",NON_BIODEGRADABLE);
        labels.add("rag");categories.put("rag",BIODEGRADABLE);
        labels.add("tabletcapsule");categories.put("tabletcapsule",NON_BIODEGRADABLE);
        labels.add("thermometer");categories.put("thermometer",NON_BIODEGRADABLE);
        labels.add("toothbrush");categories.put("toothbrush",NON_BIODEGRADABLE);
        labels.add("toothpastetube");categories.put("toothpastetube",NON_BIODEGRADABLE);
        labels.add("toothpick");categories.put("toothpick",BIODEGRADABLE);
        labels.add("traditionalChinesemedicine");categories.put("traditionalChinesemedicine",BIODEGRADABLE);
        labels.add("watermelonrind");categories.put("watermelonrind",BIODEGRADABLE);

    }




}